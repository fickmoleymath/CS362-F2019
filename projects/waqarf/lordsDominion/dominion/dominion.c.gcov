        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5212 returned 100% blocks executed 100%
     5212:    8:int compare(const void* a, const void* b) {
     5212:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
     1659:   10:        return 1;
     3553:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      381:   12:        return -1;
     3172:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
    #####:   44:    SelectStream(1);
call    0 never executed
    #####:   45:    PutSeed((long)randomSeed);
call    0 never executed
        -:   46:
        -:   47:    //check number of players
    #####:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
    #####:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    #####:   57:    for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:        for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
    #####:   73:    if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
    #####:   87:    if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:        state->supplyCount[estate] = 8;
    #####:   90:        state->supplyCount[duchy] = 8;
    #####:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
    #####:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:    state->supplyCount[silver] = 40;
    #####:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
    #####:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:        {
    #####:  110:            if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
    #####:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:                {
    #####:  115:                    if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
    #####:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
    #####:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
    #####:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
    #####:  140:    for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  141:    {
    #####:  142:        state->deckCount[i] = 0;
    #####:  143:        for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  144:        {
    #####:  145:            state->deck[i][j] = estate;
    #####:  146:            state->deckCount[i]++;
        -:  147:        }
    #####:  148:        for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  149:        {
    #####:  150:            state->deck[i][j] = copper;
    #####:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
    #####:  156:    for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  157:    {
    #####:  158:        if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
    #####:  165:    for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  166:    {
        -:  167:        //initialize hand size to zero
    #####:  168:        state->handCount[i] = 0;
    #####:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
    #####:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  179:    {
    #####:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
    #####:  184:    state->outpostPlayed = 0;
    #####:  185:    state->phase = 0;
    #####:  186:    state->numActions = 1;
    #####:  187:    state->numBuys = 1;
    #####:  188:    state->playedCardCount = 0;
    #####:  189:    state->whoseTurn = 0;
    #####:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
    #####:  194:    for (it = 0; it < 5; it++) {
branch  0 never executed
branch  1 never executed
    #####:  195:        drawCard(state->whoseTurn, state);
call    0 never executed
        -:  196:    }
        -:  197:
    #####:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  199:
    #####:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 620 returned 100% blocks executed 94%
      620:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
      620:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
      620:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:        return -1;
      620:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     3582:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
     2342:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2342:  218:        newDeck[newDeckPos] = state->deck[player][card];
     2342:  219:        newDeckPos++;
    26433:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    24091:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
     2342:  223:        state->deckCount[player]--;
        -:  224:    }
     2962:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
     2342:  226:        state->deck[player][i] = newDeck[i];
     2342:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
      620:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 7613 returned 100% blocks executed 100%
     7613:  313:int numHandCards(struct gameState *state) {
     7613:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 710 returned 100% blocks executed 100%
      710:  322:int supplyCount(int card, struct gameState *state) {
      710:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 7613 returned 100% blocks executed 100%
     7613:  348:int whoseTurn(struct gameState *state) {
     7613:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 102 returned 100% blocks executed 27%
      102:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
      102:  397:    if (state->supplyCount[province] == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  398:    {
      102:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 2406 returned 100% blocks executed 92%
     2406:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     2406:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
     2962:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
     2342:  572:            state->deck[player][i] = state->discard[player][i];
     2342:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
      620:  576:        state->deckCount[player] = state->discardCount[player];
      620:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
      620:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
        -:  586:        
        -:  587:
        -:  588:        //Step 2 Draw Card
      620:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
      620:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
      620:  597:        if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  598:            return -1;
        -:  599:
      620:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to end of hand
      620:  601:        state->deckCount[player]--;  //Decrement deck count
      620:  602:        state->handCount[player]++;  //Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
     1786:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        if (DEBUG) { //Debug statements
        -:  608:            printf("Current hand count: %d\n", count);
        -:  609:        }
        -:  610:
     1786:  611:        deckCounter = state->deckCount[player];//Create holder for the deck count
     1786:  612:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1786:  613:        state->deckCount[player]--;
     1786:  614:        state->handCount[player]++;//Increment hand count
        -:  615:    }
        -:  616:
     2406:  617:    return 0;
        -:  618:}
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:int getCost(int cardNumber)
        -:  621:{
    #####:  622:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:    {
        -:  624:    case curse:
    #####:  625:        return 0;
        -:  626:    case estate:
    #####:  627:        return 2;
        -:  628:    case duchy:
    #####:  629:        return 5;
        -:  630:    case province:
    #####:  631:        return 8;
        -:  632:    case copper:
    #####:  633:        return 0;
        -:  634:    case silver:
    #####:  635:        return 3;
        -:  636:    case gold:
    #####:  637:        return 6;
        -:  638:    case adventurer:
    #####:  639:        return 6;
        -:  640:    case council_room:
    #####:  641:        return 5;
        -:  642:    case feast:
    #####:  643:        return 4;
        -:  644:    case gardens:
    #####:  645:        return 4;
        -:  646:    case mine:
    #####:  647:        return 5;
        -:  648:    case remodel:
    #####:  649:        return 4;
        -:  650:    case smithy:
    #####:  651:        return 4;
        -:  652:    case village:
    #####:  653:        return 3;
        -:  654:    case baron:
    #####:  655:        return 4;
        -:  656:    case great_hall:
    #####:  657:        return 3;
        -:  658:    case minion:
    #####:  659:        return 5;
        -:  660:    case steward:
    #####:  661:        return 3;
        -:  662:    case tribute:
    #####:  663:        return 5;
        -:  664:    case ambassador:
    #####:  665:        return 3;
        -:  666:    case cutpurse:
    #####:  667:        return 4;
        -:  668:    case embargo:
    #####:  669:        return 2;
        -:  670:    case outpost:
    #####:  671:        return 5;
        -:  672:    case salvager:
    #####:  673:        return 4;
        -:  674:    case sea_hag:
    #####:  675:        return 4;
        -:  676:    case treasure_map:
    #####:  677:        return 4;
        -:  678:    }
        -:  679:
    #####:  680:    return -1;
        -:  681:}
        -:  682:
        -:  683:
        -:  684:
function playBaron called 407 returned 100% blocks executed 93%
      407:  685:int playBaron(int choice1, struct gameState *state, int currentPlayer, int *bonus)
        -:  686:{
      407:  687:    state->numBuys++;//Increment number of buys for this turn
      407:  688:    if (choice1 > 0) { //Player chooses to discard an Estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      204:  689:        int p = 0; //Iterator for hand
      204:  690:        int card_discarded = 0;  //Flag for discard. Instantiate to false
     1022:  691:        while(card_discarded == 0) {   //loop until card is discarded
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      614:  692:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      101:  693:                *bonus += 4;//Add 4 coins to the bonus variable 
        -:  694:
      101:  695:                if(discardCard(p, currentPlayer, state) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  696:                {
      101:  697:                    card_discarded = 1;//Exit the loop
        -:  698:                }
        -:  699:                else
        -:  700:                {
    #####:  701:                    printf("Error discarding card\n");
call    0 never executed
    #####:  702:                    return 1;
        -:  703:                }
        -:  704:                
        -:  705:            }
      513:  706:            else if (p > state->handCount[currentPlayer]) {   //Reached end of players hand and did not find an Estate card
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  707:                if(DEBUG) {
        -:  708:                    printf("No estate cards in your hand, invalid choice\n");
        -:  709:                    printf("Must gain an estate if there are any\n");
        -:  710:                }
      103:  711:                if (supplyCount(estate, state) > 0) {    //If there are Estates available in the game, give one to the current player
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:  712:                    gainCard(estate, state, 2, currentPlayer);
call    0 returned 100%
        -:  713:
        1:  714:                    state->supplyCount[estate]--;//Decrement estates
        1:  715:                    if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  716:                        isGameOver(state);
call    0 returned 100%
        -:  717:                    }
        -:  718:                }
      103:  719:                card_discarded = 1;//Exit the loop
        -:  720:            }
        -:  721:
        -:  722:            else {
      410:  723:                p += 2;//Next card
        -:  724:            }
        -:  725:        }
        -:  726:    }
        -:  727:
        -:  728:    else {  //player will not discard an Estate
      203:  729:        if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
      200:  730:            gainCard(estate, state, 1, currentPlayer);  //Gain an estate to deck
call    0 returned 100%
        -:  731:
      200:  732:            state->supplyCount[estate]--;//Decrement Estates
      200:  733:            if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 50%
      101:  734:                isGameOver(state);    //Estate pile is empty, check if game should be over
call    0 returned 100%
        -:  735:            }
        -:  736:        }
        -:  737:    }
        -:  738:
      407:  739:    return 0;
        -:  740:}
        -:  741:
        -:  742:
        -:  743:
        -:  744:
function playMinion called 202 returned 100% blocks executed 100%
      202:  745:int playMinion(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos, int *bonus)
        -:  746:{
        -:  747:    int i;
        -:  748:    int j;
        -:  749:    //+1 action
      202:  750:    state->numActions++;
        -:  751:
        -:  752:
      202:  753:    if (choice1)  //player chooses to get 2 additional coins this turn
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  754:    {
        2:  755:        *bonus += 2;
        -:  756:
        -:  757:        //discard card from hand
        2:  758:        discardCard(handPos, currentPlayer, state);
call    0 returned 100%
        -:  759:    }
      200:  760:    else if (choice2)       //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  761:    {
        -:  762:        //discard hand
     7813:  763:        while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 97%
branch  2 taken 3% (fallthrough)
        -:  764:        {
     7413:  765:            discardCard(0, currentPlayer, state);
call    0 returned 100%
        -:  766:        }
        -:  767:
        -:  768:        //draw 4
     1200:  769:        for (i = 0; i <= 4; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  770:        {
     1000:  771:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  772:        }
        -:  773:
        -:  774:        //other players discard hand and redraw if hand size > 4
      600:  775:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  776:        {
      400:  777:            if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  778:            {
      200:  779:                if ( state->handCount[i] > 4 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  780:                {
        -:  781:                    //discard hand
     1200:  782:                    while( state->handCount[i] > 1 )
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  783:                    {
      800:  784:                        discardCard(0, i, state);
call    0 returned 100%
        -:  785:                    }
        -:  786:
        -:  787:                    //draw 4
     1000:  788:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  789:                    {
      800:  790:                        drawCard(i, state);
call    0 returned 100%
        -:  791:                    }
        -:  792:                }
        -:  793:            }
        -:  794:        }
        -:  795:
        -:  796:    }
      202:  797:    return 0;
        -:  798:
        -:  799:}
        -:  800:
        -:  801:
        -:  802:
        -:  803:
function playAmbassador called 4 returned 100% blocks executed 100%
        4:  804:int playAmbassador(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos)
        -:  805:{
        -:  806:    int i;
        4:  807:    int j = 0;      //used to check if player has enough cards to discard
        -:  808:
        4:  809:    if (choice2 > 2 || choice2 < 0)   //choice is the number of cards to return to the supply. can't be more than 2 or less than 0
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  810:    {
        1:  811:        return -1;
        -:  812:    }
        -:  813:
        -:  814:    //if (choice1 == handPos)  //Not able to return this ambassador card to supply
        -:  815:    //{
        -:  816:        //return -1;
        -:  817:    //}
        -:  818:
       16:  819:    for (i = 0; i < state->handCount[currentPlayer]; i++)   //for each card in hand
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  820:    {
       13:  821:        if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])  //check it matches choice1 card, but is not current handPos
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -:  822:        {
        2:  823:            j++;
        -:  824:        }
        -:  825:    }
        3:  826:    if (j < choice2)  //Check that we actually have enough cards to remove
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  827:    {
        1:  828:        return -1;
        -:  829:    }
        -:  830:
        -:  831:    if (DEBUG)
        -:  832:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  833:
        -:  834:    //increase supply count for choosen card by amount being discarded
        2:  835:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  836:
        -:  837:    //each other player gains a copy of revealed card
        5:  838:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  839:    {
        3:  840:        if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  841:        {
        2:  842:            gainCard(state->hand[currentPlayer][choice1], state, 1, i);
call    0 returned 100%
        -:  843:        }
        -:  844:    }
        -:  845:
        -:  846:    //discard played Ambassador card from hand
        2:  847:    discardCard(2, currentPlayer, state);
call    0 returned 100%
        -:  848:
        -:  849:    //trash copies of cards returned to supply
        3:  850:    for (j = 0; j < choice2; j++)
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        -:  851:    {
        2:  852:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  853:        {
        2:  854:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  855:            {
        1:  856:                trashCard(i, currentPlayer, state);
call    0 returned 100%
        1:  857:                break;
        -:  858:            }
        -:  859:        }
        -:  860:    }
        -:  861:
        2:  862:    return 0;
        -:  863:}
        -:  864:
        -:  865:
        -:  866:
        -:  867:
function playTribute called 404 returned 100% blocks executed 38%
      404:  868:int playTribute(int handPos, struct gameState *state, int currentPlayer, int nextPlayer, int *tributeRevealedCards, int *bonus)
        -:  869:{
        -:  870:    int i;
        -:  871:    //check if player has any cards in their deck and/or discard pile
      404:  872:    if((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  873:    {
        -:  874:        //player has no cards to reveal and discard
        -:  875:        if (DEBUG) {
        -:  876:            printf("No cards to reveal\n");
        -:  877:        }
        -:  878:
      101:  879:        return 0;
        -:  880:    }
      303:  881:    else if((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) >=1) //player has at least 1 card
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  882:    {
      909:  883:        for(i=0; i<2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  884:        {
      606:  885:            drawCard(nextPlayer, state); //pull card off deck. if no cards in deck, shuffle discard back into deck
call    0 returned 100%
      606:  886:            tributeRevealedCards[i] = state->hand[nextPlayer][state->handCount[nextPlayer]-1];  //assign tribute element with card that was temporarily placed in hand
      606:  887:            discardCard((state->handCount[nextPlayer]-1), nextPlayer, state);  //Discard the card that was just added to hand from deck
call    0 returned 100%
        -:  888:        }
        -:  889:    }
        -:  890:    else
        -:  891:    {
    #####:  892:        printf("Error: player has negative cards in discard and deck!\n");
call    0 never executed
        -:  893:    }
        -:  894:
        -:  895:
      303:  896:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //Check for duplicate card and only gain rewards once
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      303:  897:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  898:        { //Treasure cards
      303:  899:            *bonus += 2;
        -:  900:        }
    #####:  901:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  902:        { //Victory Card Found
    #####:  903:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  904:            drawCard(currentPlayer, state);
call    0 never executed
        -:  905:        }
        -:  906:        else { //Action Card
    #####:  907:            state->numActions *= 2;
        -:  908:        }
        -:  909:    }
    #####:  910:    else if(tributeRevealedCards[0] != tributeRevealedCards[1]) //tribute cards are not duplicate so gain rewards twice
branch  0 never executed
branch  1 never executed
        -:  911:    {
    #####:  912:        for (i = 0; i < 2; i ++) {
branch  0 never executed
branch  1 never executed
    #####:  913:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  914:            { //Treasure cards
    #####:  915:                *bonus += 2;
        -:  916:            }
    #####:  917:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  918:            { //Victory Card Found
    #####:  919:                drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:                drawCard(currentPlayer, state);
call    0 never executed
        -:  921:            }
        -:  922:            else { //Action Card
    #####:  923:                state->numActions += 2;
        -:  924:            }
        -:  925:        }
        -:  926:    }
        -:  927:
        -:  928:    //Add tribute card to played card list and discard
      303:  929:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      303:  930:    state->playedCardCount++;
      303:  931:    discardCard(handPos, currentPlayer, state);
call    0 returned 100%
        -:  932:
      303:  933:    return 0;
        -:  934:}
        -:  935:
        -:  936:
        -:  937:
        -:  938:
        -:  939:
function playMine called 4 returned 100% blocks executed 32%
        4:  940:int playMine(int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer)
        -:  941:{
        -:  942:    int i;
        4:  943:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  944:
        -:  945:    // Make sure choice1 card to trash is a treasure card
        4:  946:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  947:    {
        1:  948:        return -1;
        -:  949:    }
        -:  950:    // Make sure choice2 card to gain is a treasure card
        3:  951:    if (choice2 < copper || choice2 > gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  952:    {
        3:  953:        return 0;
        -:  954:    }
        -:  955:    // Make sure choice2 card to gain does not cost more than 3 coins more than choice1 card 
    #####:  956:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  957:    {
    #####:  958:        return -1;
        -:  959:    }
        -:  960:
        -:  961:    // Passed all checks, Gain the card
    #####:  962:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  963:
        -:  964:    //discard mine card from hand
    #####:  965:    discardCard(handPos, currentPlayer, state);
call    0 never executed
        -:  966:
        -:  967:    // trash card. need loop since card indexes have changed with discardCard being called
    #####:  968:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  969:    {
    #####:  970:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  971:        {
    #####:  972:            trashCard(i, currentPlayer, state);
call    0 never executed
        -:  973:        }
        -:  974:    }
        -:  975:
    #####:  976:    return 0;
        -:  977:
        -:  978:}
        -:  979:
        -:  980:
        -:  981:
        -:  982:
        -:  983:
        -:  984:
        -:  985:
        -:  986:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  987:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  988:{
        -:  989:    int i;
        -:  990:    int j;
        -:  991:    int k;
        -:  992:    int x;
        -:  993:    int index;
    #####:  994:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  995:    int nextPlayer = currentPlayer + 1;
        -:  996:
    #####:  997:    int tributeRevealedCards[2] = {-1, -1};
        -:  998:    int temphand[MAX_HAND];// moved above the if statement
    #####:  999:    int drawntreasure=0;
        -: 1000:    int cardDrawn;
    #####: 1001:    int z = 0;// this is the counter for the temp hand
    #####: 1002:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####: 1003:        nextPlayer = 0;
        -: 1004:    }
        -: 1005:
        -: 1006:
        -: 1007:    //uses switch to select card and perform actions
    #####: 1008:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1009:    {
        -: 1010:    case adventurer:
    #####: 1011:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####: 1012:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1013:                shuffle(currentPlayer, state);
call    0 never executed
        -: 1014:            }
    #####: 1015:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1016:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1017:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1018:                drawntreasure++;
        -: 1019:            else {
    #####: 1020:                temphand[z]=cardDrawn;
    #####: 1021:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1022:                z++;
        -: 1023:            }
        -: 1024:        }
    #####: 1025:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####: 1026:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1027:            z=z-1;
        -: 1028:        }
    #####: 1029:        return 0;
        -: 1030:
        -: 1031:    case council_room:
        -: 1032:        //+4 Cards
    #####: 1033:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:        {
    #####: 1035:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1036:        }
        -: 1037:
        -: 1038:        //+1 Buy
    #####: 1039:        state->numBuys++;
        -: 1040:
        -: 1041:        //Each other player draws a card
    #####: 1042:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:        {
    #####: 1044:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1045:            {
    #####: 1046:                drawCard(i, state);
call    0 never executed
        -: 1047:            }
        -: 1048:        }
        -: 1049:
        -: 1050:        //put played card in played card pile
    #####: 1051:        discardCard(handPos, currentPlayer, state);
call    0 never executed
        -: 1052:
    #####: 1053:        return 0;
        -: 1054:
        -: 1055:    case feast:
        -: 1056:        //gain card with cost up to 5
        -: 1057:        //Backup hand
    #####: 1058:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1059:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1060:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1061:        }
        -: 1062:        //Backup hand
        -: 1063:
        -: 1064:        //Update Coins for Buy
    #####: 1065:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1066:        x = 1;//Condition to loop on
    #####: 1067:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1068:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1069:                if (DEBUG)
        -: 1070:                    printf("None of that card left, sorry!\n");
        -: 1071:
        -: 1072:                if (DEBUG) {
        -: 1073:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1074:                }
        -: 1075:            }
    #####: 1076:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1077:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1078:
        -: 1079:                if (DEBUG) {
        -: 1080:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1081:                }
        -: 1082:            }
        -: 1083:            else {
        -: 1084:
        -: 1085:                if (DEBUG) {
        -: 1086:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1087:                }
        -: 1088:
    #####: 1089:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1090:                x = 0;//No more buying cards
        -: 1091:
        -: 1092:                if (DEBUG) {
        -: 1093:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1094:                }
        -: 1095:
        -: 1096:            }
        -: 1097:        }
        -: 1098:
        -: 1099:        //Reset Hand
    #####: 1100:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1101:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1102:            temphand[i] = -1;
        -: 1103:        }
        -: 1104:        //Reset Hand
        -: 1105:
    #####: 1106:        return 0;
        -: 1107:
        -: 1108:    case gardens:
    #####: 1109:        return -1;
        -: 1110:
        -: 1111:    case mine:
    #####: 1112:        playMine(choice1, choice2, handPos, state, currentPlayer);
call    0 never executed
    #####: 1113:        break;
        -: 1114:
        -: 1115:    case remodel:
    #####: 1116:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1117:
    #####: 1118:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1119:        {
    #####: 1120:            return -1;
        -: 1121:        }
        -: 1122:
    #####: 1123:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1124:
        -: 1125:        //discard card from hand
    #####: 1126:        discardCard(handPos, currentPlayer, state);
call    0 never executed
        -: 1127:
        -: 1128:        //discard trashed card
    #####: 1129:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:        {
    #####: 1131:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1132:            {
    #####: 1133:                discardCard(i, currentPlayer, state);
call    0 never executed
    #####: 1134:                break;
        -: 1135:            }
        -: 1136:        }
        -: 1137:
        -: 1138:
    #####: 1139:        return 0;
        -: 1140:
        -: 1141:    case smithy:
        -: 1142:        //+3 Cards
    #####: 1143:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1146:        }
        -: 1147:
        -: 1148:        //discard card from hand
    #####: 1149:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1150:        return 0;
        -: 1151:
        -: 1152:    case village:
        -: 1153:        //+1 Card
    #####: 1154:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1155:
        -: 1156:        //+2 Actions
    #####: 1157:        state->numActions = state->numActions + 2;
        -: 1158:
        -: 1159:        //discard played card from hand
    #####: 1160:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1161:        return 0;
        -: 1162:
        -: 1163:    case baron:
    #####: 1164:        playBaron(choice1, state, currentPlayer, bonus);
call    0 never executed
    #####: 1165:        break;
        -: 1166:
        -: 1167:    case great_hall:
        -: 1168:        //+1 Card
    #####: 1169:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1170:
        -: 1171:        //+1 Actions
    #####: 1172:        state->numActions++;
        -: 1173:
        -: 1174:        //discard card from hand
    #####: 1175:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1176:        return 0;
        -: 1177:
        -: 1178:    case minion:
    #####: 1179:        playMinion(choice1, choice2, state, currentPlayer, handPos, bonus);
call    0 never executed
    #####: 1180:        break;
        -: 1181:
        -: 1182:    case steward:
    #####: 1183:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1184:        {
        -: 1185:            //+2 cards
    #####: 1186:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1187:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1188:        }
    #####: 1189:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1190:        {
        -: 1191:            //+2 coins
    #####: 1192:            state->coins = state->coins + 2;
        -: 1193:        }
        -: 1194:        else
        -: 1195:        {
        -: 1196:            //trash 2 cards in hand
    #####: 1197:            trashCard(choice2, currentPlayer, state);
call    0 never executed
    #####: 1198:            trashCard(choice3, currentPlayer, state);
call    0 never executed
        -: 1199:        }
        -: 1200:
        -: 1201:        //discard card from hand
    #####: 1202:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1203:        return 0;
        -: 1204:
        -: 1205:
        -: 1206:    case tribute:
    #####: 1207:        playTribute(handPos, state, currentPlayer, nextPlayer, tributeRevealedCards, bonus);
call    0 never executed
    #####: 1208:        break;
        -: 1209:
        -: 1210:
        -: 1211:    case ambassador:
    #####: 1212:        playAmbassador(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
    #####: 1213:        break;
        -: 1214:
        -: 1215:
        -: 1216:    case cutpurse:
        -: 1217:
    #####: 1218:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1219:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:        {
    #####: 1221:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1222:            {
    #####: 1223:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:                {
    #####: 1225:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1226:                    {
    #####: 1227:                        discardCard(j, i, state);
call    0 never executed
    #####: 1228:                        break;
        -: 1229:                    }
    #####: 1230:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1231:                    {
    #####: 1232:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1233:                        {
        -: 1234:                            if (DEBUG)
        -: 1235:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1236:                        }
    #####: 1237:                        break;
        -: 1238:                    }
        -: 1239:                }
        -: 1240:
        -: 1241:            }
        -: 1242:
        -: 1243:        }
        -: 1244:
        -: 1245:        //discard played card from hand
    #####: 1246:        discardCard(handPos, currentPlayer, state);
call    0 never executed
        -: 1247:
    #####: 1248:        return 0;
        -: 1249:
        -: 1250:
        -: 1251:    case embargo:
        -: 1252:        //+2 Coins
    #####: 1253:        state->coins = state->coins + 2;
        -: 1254:
        -: 1255:        //see if selected pile is in play
    #####: 1256:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1257:        {
    #####: 1258:            return -1;
        -: 1259:        }
        -: 1260:
        -: 1261:        //add embargo token to selected supply pile
    #####: 1262:        state->embargoTokens[choice1]++;
        -: 1263:
        -: 1264:        //trash card
    #####: 1265:        trashCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1266:        return 0;
        -: 1267:
        -: 1268:    case outpost:
        -: 1269:        //set outpost flag
    #####: 1270:        state->outpostPlayed++;
        -: 1271:
        -: 1272:        //discard card
    #####: 1273:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1274:        return 0;
        -: 1275:
        -: 1276:    case salvager:
        -: 1277:        //+1 buy
    #####: 1278:        state->numBuys++;
        -: 1279:
    #####: 1280:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1281:        {
        -: 1282:            //gain coins equal to trashed card
    #####: 1283:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1284:            //trash card
    #####: 1285:            trashCard(choice1, currentPlayer, state);
call    0 never executed
        -: 1286:        }
        -: 1287:
        -: 1288:        //discard card
    #####: 1289:        discardCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1290:        return 0;
        -: 1291:
        -: 1292:    case sea_hag:
    #####: 1293:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1294:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1295:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1296:                state->deckCount[i]--;
    #####: 1297:                state->discardCount[i]++;
    #####: 1298:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1299:            }
        -: 1300:        }
    #####: 1301:        return 0;
        -: 1302:
        -: 1303:    case treasure_map:
        -: 1304:        //search hand for another treasure_map
    #####: 1305:        index = -1;
    #####: 1306:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1307:        {
    #####: 1308:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1309:            {
    #####: 1310:                index = i;
    #####: 1311:                break;
        -: 1312:            }
        -: 1313:        }
    #####: 1314:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1315:        {
        -: 1316:            //trash both treasure cards
    #####: 1317:            trashCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1318:            trashCard(index, currentPlayer, state);
call    0 never executed
        -: 1319:
        -: 1320:            //gain 4 Gold cards
    #####: 1321:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1322:            {
    #####: 1323:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1324:            }
        -: 1325:
        -: 1326:            //return success
    #####: 1327:            return 1;
        -: 1328:        }
        -: 1329:
        -: 1330:        //no second treasure_map found in hand
    #####: 1331:        return -1;
        -: 1332:    }
        -: 1333:
    #####: 1334:    return -1;
        -: 1335:}
        -: 1336:
function discardCard called 9227 returned 100% blocks executed 86%
     9227: 1337:int discardCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1338:{
     9227: 1339:    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos]; //Add card at handPos to players discard pile
     9227: 1340:    state->discardCount[currentPlayer]++;  //increment the count of cards in players discard pile
        -: 1341:    
        -: 1342:    //set played card to -1
     9227: 1343:    state->hand[currentPlayer][handPos] = -1;
        -: 1344:
        -: 1345:    //remove card from player's hand
     9227: 1346:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1347:    {
        -: 1348:        //reduce number of cards in hand
      806: 1349:        state->handCount[currentPlayer]--;
        -: 1350:    }
     8421: 1351:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1352:    {
        -: 1353:        //reduce number of cards in hand
    #####: 1354:        state->handCount[currentPlayer]--;
        -: 1355:    }
        -: 1356:    else
        -: 1357:    {
        -: 1358:        //replace discarded card with last card in hand
     8421: 1359:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1360:        //set last card to -1
     8421: 1361:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1362:        //reduce number of cards in hand
     8421: 1363:        state->handCount[currentPlayer]--;
        -: 1364:    }
        -: 1365:
     9227: 1366:    return 0;
        -: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371:
function trashCard called 1 returned 100% blocks executed 71%
        1: 1372:int trashCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1373:{
        -: 1374:    //set played card to -1
        1: 1375:    state->hand[currentPlayer][handPos] = -1;
        -: 1376:
        -: 1377:    //remove card from player's hand
        1: 1378:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:        //reduce number of cards in hand
    #####: 1381:        state->handCount[currentPlayer]--;
        -: 1382:    }
        1: 1383:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:        //reduce number of cards in hand
    #####: 1386:        state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:    else
        -: 1389:    {
        -: 1390:        //replace discarded card with last card in hand
        1: 1391:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:        //set last card to -1
        1: 1393:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:        //reduce number of cards in hand
        1: 1395:        state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:
        1: 1398:    return 0;
        -: 1399:}
        -: 1400:
        -: 1401:
        -: 1402:
        -: 1403:
        -: 1404:
function gainCard called 203 returned 100% blocks executed 80%
      203: 1405:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1406:{
        -: 1407:    //Note: supplyPos is enum of choosen card
        -: 1408:
        -: 1409:    //check if supply pile is empty (0) or card is not used in game (-1)
      203: 1410:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1411:    {
    #####: 1412:        return -1;
        -: 1413:    }
        -: 1414:
        -: 1415:    //added card for [whoseTurn] current player:
        -: 1416:    // toFlag = 0 : add to discard
        -: 1417:    // toFlag = 1 : add to deck
        -: 1418:    // toFlag = 2 : add to hand
        -: 1419:
      203: 1420:    if (toFlag == 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1421:    {
      202: 1422:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      202: 1423:        state->deckCount[player]++;
        -: 1424:    }
        1: 1425:    else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1426:    {
        1: 1427:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1428:        state->handCount[player]++;
        -: 1429:    }
        -: 1430:    else
        -: 1431:    {
    #####: 1432:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1433:        state->discardCount[player]++;
        -: 1434:    }
        -: 1435:
        -: 1436:    //decrease number in supply pile
      203: 1437:    state->supplyCount[supplyPos]--;
        -: 1438:
      203: 1439:    return 0;
        -: 1440:}
        -: 1441:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1442:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1443:{
        -: 1444:    int i;
        -: 1445:
        -: 1446:    //reset coin count
    #####: 1447:    state->coins = 0;
        -: 1448:
        -: 1449:    //add coins for each Treasure card in player's hand
    #####: 1450:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1451:    {
    #####: 1452:        if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1453:        {
    #####: 1454:            state->coins += 1;
        -: 1455:        }
    #####: 1456:        else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1457:        {
    #####: 1458:            state->coins += 2;
        -: 1459:        }
    #####: 1460:        else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1461:        {
    #####: 1462:            state->coins += 3;
        -: 1463:        }
        -: 1464:    }
        -: 1465:
        -: 1466:    //add bonus
    #####: 1467:    state->coins += bonus;
        -: 1468:
    #####: 1469:    return 0;
        -: 1470:}
        -: 1471:
        -: 1472:
        -: 1473://end of dominion.c
        -: 1474:
